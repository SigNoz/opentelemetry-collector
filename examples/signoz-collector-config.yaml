receivers:
  otlp:
    protocols:
      grpc:
      http:
  jaeger:
    protocols:
      grpc:
      thrift_http:

  hostmetrics:
    collection_interval: 10s
    scrapers:
      load:
      memory:

processors:
  batch:
    send_batch_size: 1000
    timeout: 10s
  memory_limiter:
    # Same as --mem-ballast-size-mib CLI argument
    ballast_size_mib: 683
    # 80% of maximum memory up to 2G
    limit_mib: 1500
    # 25% of limit up to 2G
    spike_limit_mib: 512
    check_interval: 5s
  # queued_retry:
  #   num_workers: 4
  #   queue_size: 100
  #   retry_on_failure: true
extensions:
  health_check: {}
  zpages: {}
exporters:
  # kafka/traces:
  #   brokers:
  #     - 3.143.220.32:9092
  #   topic: 'otlp_spans'
  #   protocol_version: 2.0.0
  # logging:
  #   loglevel: debug
  #   sampling_initial: 5
  #   sampling_thereafter: 200
  # kafka/metrics:
  #   brokers:
  #     - 3.143.220.32:9092
  #   topic: 'otlp_metrics'
  #   protocol_version: 2.0.0
  # clickhouse:
  #   datasource: tcp://localhost:9000
  prometheus:
    endpoint: "127.0.0.1:8889"
    resource_to_telemetry_conversion:
      enabled: true
  clickhousemetricswrite:
    # endpoint: "http://some.url:9411/api/prom/push"
    resource_to_telemetry_conversion:
      enabled: true

service:
  extensions: [health_check, zpages]
  pipelines:
    # traces:
    #   receivers: [jaeger, otlp]
    #   processors: [batch]
    #   exporters: [clickhouse]
    metrics:
      receivers: [otlp, hostmetrics]
      processors: [batch]
      exporters: [prometheus, clickhousemetricswrite]